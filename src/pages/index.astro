---
// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
import fs from "fs";
import path from "path";
import Layout from "../layouts/Layout.astro";

interface EventData {
  title: string;
  location: string;
  time: string;
  creator: string;
  details: string;
  image: string;
}

export const prerender = false;

const filePath = path.resolve("src/data/event.txt");
const rawData = fs.readFileSync(filePath, "utf-8");

const events: EventData[] = rawData
  .split("---")
  .map(block => {
    const lines = block
      .trim()
      .split("\n")
      .map(line => line.trim())
      .filter(Boolean);

    const event: Partial<EventData> = {};
    for (const line of lines) {
      const [key, ...rest] = line.split(":");
      if (key && rest.length) {
        const value = rest.join(":").trim();
        switch (key.trim().toLowerCase()) {
          case "title":
            event.title = value;
            break;
          case "location":
            event.location = value;
            break;
          case "time":
            event.time = value;
            break;
          case "creator":
            event.creator = value;
            break;
          case "details":
            event.details = value;
            break;
          case "image":
            event.image = value;
            break;
        }
      }
    }
    return event as EventData;
  })
  .filter(e => !!e.title);

// const displayedEvents = events;
const displayedEvents = events.slice(0, 2);

const myFilePath = path.resolve("src/data/my_event.txt");
const myRawData = fs.readFileSync(myFilePath, "utf-8");

const myEvents: EventData[] = myRawData
  .split("---")
  .map(block => {
    const lines = block
      .trim()
      .split("\n")
      .map(line => line.trim())
      .filter(Boolean);

    const event: Partial<EventData> = {};
    for (const line of lines) {
      const [key, ...rest] = line.split(":");
      if (key && rest.length) {
        const value = rest.join(":").trim();
        switch (key.trim().toLowerCase()) {
          case "title":
            event.title = value;
            break;
          case "location":
            event.location = value;
            break;
          case "time":
            event.time = value;
            break;
          case "creator":
            event.creator = value;
            break;
          case "details":
            event.details = value;
            break;
          case "image":
            event.image = value;
            break;
        }
      }
    }
    return event as EventData;
  })
  .filter(e => !!e.title);

// const displayedEvents = myEvents;
const displayedMyEvents = myEvents.slice(0, 2);
---

<Layout>
  <div class="container">
    <div class="inner-container">
      <img class="logo" src="/logo.png">
      <br>
      <br>
      <button class="item" onclick="window.location.replace('/events/create');">Create an Event </button>
      <h1>Upcoming Events</h1>
      <div class="event-grid">
        {displayedEvents.map(event => (
        <div class="event-card">
          <a class="link" href={`/events/${event.title.toLowerCase().replace(/\s+/g, "-").replace(/[^\w-]/g, "")}/`}></a>
          <h2>{event.title}</h2>
          <p><strong>Location:</strong> {event.location}</p>
          <p><strong>Time:</strong> {event.time}</p>
          <p><strong>Creator:</strong> {event.creator}</p>
          <p>{event.details}</p>
        </div>
        ))}
      </div>
      <h1>Your Events</h1>
      <div class="event-grid">
        {displayedMyEvents.map(event => (
        <div class="event-card">
          <a class="link" href={`/myEvents/${event.title.toLowerCase().replace(/\s+/g, "-").replace(/[^\w-]/g, "")}/`}></a>
          <h2>{event.title}</h2>
          <p><strong>Location:</strong> {event.location}</p>
          <p><strong>Time:</strong> {event.time}</p>
          <p><strong>Creator:</strong> {event.creator}</p>
          <p>{event.details}</p>
        </div>
        ))}
      </div>
    </div>
  </div>
</Layout>
<style>
  .events {
    flex: 1;
    padding: 2rem;
    background: #fafafa;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .events h1 {
    text-align: center;
    margin-bottom: 2rem;
  }

  .event-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 2rem;
    width: 100%;
    max-width: 1000px;
  }

  .event-card {
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    cursor: pointer;
    position: relative;
  }

  .event-card h2 {
    margin-top: 0;
    color: #333;
  }

  .link {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
  }
  
  .container {
    width: 100%;
    margin: auto;
    margin-top: 30px;
    padding-bottom: 100px;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
  }
  .inner-container {
    width: 80%;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .logo {
    margin: auto;
    width: 255px;
    height: 177px;
  }

  button {
    width: 15%;
    margin: auto;
    padding: 1% 1%;
    cursor: pointer;
  }

</style>

